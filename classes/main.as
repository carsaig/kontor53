package {	import flash.display.Sprite;	import flash.display.Bitmap;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.display.StageAlign;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import classes.display.LoaderSymbol;	import classes.display.ErrorMessage;	import classes.utils.XMLLoader;	import classes.utils.Logger;	import classes.utils.ListHolder;	/**	 * @author Felix Gertz, BM8 GmbH	 */	public class Kontor extends Sprite	{		// Members		private var _log : felixgertz.utils.Logger;		private var _config : XMLList;		private var _formats : XMLList;		private var _loadersymbol : LoaderSymbol;		private var _bm8logo : Bitmap;		// Constructor		public function Kontor() : void 		{						if (stage) init();			else addEventListener(Event.ADDED_TO_STAGE, init);						Embedder.createInstance();		}		// Methods			private function init(e : Event = null) : void 		{			removeEventListener(Event.ADDED_TO_STAGE, init);			// entry point								stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;						_loadersymbol = new LoaderSymbol();			_loadersymbol.x = (1024 - _loadersymbol.width) / 2;			_loadersymbol.y = (768 - _loadersymbol.height) / 2;			this.addChild(_loadersymbol);						var config_loader : XMLLoader = new XMLLoader("conf/config.xml");			config_loader.addEventListener(Event.COMPLETE, completeHandler_config);			config_loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler_config);			config_loader.addEventListener(XMLLoader.XML_ERROR, xmlErrorHandler);		}		// Eventhandler		private function completeHandler_config(event : Event) : void		{			_config = XMLLoader(Object(event.target)).data;			ListHolder.getInstance('config', _config);						_bm8logo = Bitmap(new Embedder.BM8Logo());			if(_config.hide_logo != 'true')			{				_bm8logo.x = 10;				_bm8logo.y = _config.stage_height - _bm8logo.height - 10;				this.addChild(_bm8logo);			}						if(_config.logging_on == 'true')				Logger.init(true);			else				Logger.init(false);							_log = new Logger("Kontor.as");						if(_config.fullscreen == 'true')			{				_log.info("Fullscreenmode = true");				stage.displayState = StageDisplayState.FULL_SCREEN;			}			else				_log.info("Fullscreenmode = false");							var contentformats_loader : XMLLoader = new XMLLoader("formats.xml");			contentformats_loader.addEventListener(Event.COMPLETE, completeHandler_formats);			contentformats_loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler_formats);			contentformats_loader.addEventListener(XMLLoader.XML_ERROR, xmlErrorHandler);						XMLLoader(Object(event.target)).removeEventListener(Event.COMPLETE, completeHandler_config);			XMLLoader(Object(event.target)).removeEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler_config);			XMLLoader(Object(event.target)).removeEventListener(XMLLoader.XML_ERROR, xmlErrorHandler);		}				private function completeHandler_formats(event : Event) : void		{			_formats = XMLLoader(Object(event.target)).data;			ListHolder.getInstance('formats', _formats);						XMLLoader(Object(event.target)).removeEventListener(Event.COMPLETE, completeHandler_formats);			XMLLoader(Object(event.target)).removeEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler_formats);			XMLLoader(Object(event.target)).removeEventListener(XMLLoader.XML_ERROR, xmlErrorHandler);						Processor.getInstance(this, _loadersymbol, _bm8logo);		}				private function ioErrorHandler_config(event : IOErrorEvent) : void		{			var error : ErrorMessage = new ErrorMessage("Fatal Error: Could not load 'config.xml'", 10, 10);			this.addChild(error);			}				private function ioErrorHandler_formats(event : IOErrorEvent) : void		{			var error : ErrorMessage = new ErrorMessage("Fatal Error: Could not load 'formats.xml'", 10, 10);			this.addChild(error);		}				private function xmlErrorHandler(event : Event) : void		{			var error : ErrorMessage = new ErrorMessage("Fatal Error: Improper XML in '"+event.target.requestURI+"'", 10, 10);			this.addChild(error);		}	}		}