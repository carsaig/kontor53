package classes.utils {	/**	 * @author Felix Gertz, BM8 GmbH	 * 	 * Holds an XMLList in a Singleton enviorment.	 * 	 */	public final class ListHolder	{		private static var lists : Object;		private var _list : XMLList;				// Singleton		public static function getInstance(listname : String, list : XMLList = null) : ListHolder		{			if(lists == null)				lists = new Object();						if(list == null && lists[listname] == null)				throw new Error("Please initialise the ListHolder '" + listname + "' once with a XMLList not null.");						if(lists[listname] == null)				lists[listname] = new ListHolder(listname, list, hidden);			return lists[listname];		}		private static function hidden():void {}				public function ListHolder(listname : String, list : XMLList, caller : Function = null)		{			if(caller != hidden)				throw new Error("ListHolder is a singleton class, use getInstance() instead.");			if(lists[listname] != null)				throw new Error("Only one ListHolder instance should be instantiated.");			_list = list;		}				public function get list() : XMLList		{			return _list;		}	}}