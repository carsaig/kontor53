package classes.utils {	import classes.utils.Logger;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;		/** 	* @author Felix Gertz, BM8 GmbH	*/	public class XMLLoader extends EventDispatcher	{			// Constants		public static const XML_ERROR:String = "xml_error";				// Members		private var _log : Logger;		private var _loader : URLLoader;		private var _requestURI : String;		private var _isxml : Boolean;		private var _xmldata : XML;		private var _completed : Boolean;		// Constructor		public function XMLLoader(requestURI : String, isxml : Boolean = true)		{			_requestURI = requestURI;			_isxml = isxml;			_completed = false;			_log = new Logger("XMLLoader.as");			_loader = new URLLoader();			var request : URLRequest = new URLRequest(_requestURI);						_loader.addEventListener(Event.COMPLETE, completeHandler);			_loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);						try			{				_loader.load(request);			}			catch (error : Error)			{				_log.fatal("Unable to load XML-File: "+_requestURI);				throw error;			}		}				// Getter & Setter		public function get data() : XMLList		{			if(!_isxml)				throw new Error("Datamode is not set to XML.");						if(!_completed)			{				_log.error("Fetching of XML-data is not finished completely.");				throw new Error("Fetching of XML-data is not finished completely.");			}						return XMLList(_xmldata);		}				public function get textdata() : String		{			if(!_completed)			{				_log.error("Fetching of data is not finished completely.");				throw new Error("Fetching of data is not finished completely.");			}						return String(_loader.data);		}				public function get requestURI() : String		{			return _requestURI;		}		// EventHandler		private function completeHandler(event : Event) : void		{			if(_isxml)			{				try				{					_xmldata = new XML(_loader.data);				}				catch (error : Error)				{					_log.fatal(error.message);					this.dispatchEvent(new Event(XML_ERROR));					return;				}			}			_completed = true;			_log.info("XML-File completely loaded: "+_requestURI);			this.dispatchEvent(event);		}				private function ioErrorHandler(event : IOErrorEvent) : void		{			_log.error("IO-error on loading XML-File: "+_requestURI);			this.dispatchEvent(event);		}	}}